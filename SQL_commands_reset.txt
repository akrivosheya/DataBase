DROP TABLE WENT_TO_HIKE|
DROP TABLE DIARY|
DROP TABLE CONDUCTED_HIKE|
DROP TABLE CHECK_POINT|
DROP TABLE CONTAINS|
DROP TABLE PLACE|
DROP TABLE HIKE|
DROP TABLE ROUTE|
DROP TABLE PARTICIPATION|
DROP TABLE COMPETITIONS|
DROP TABLE ATTENDANCE|
DROP TABLE TRAINS|
DROP TABLE COACHES|
DROP TABLE SPORTSMEN|
DROP TABLE TRAININGS|
DROP TABLE GROUPS|
DROP TABLE SECTIONS|
DROP TABLE DIRECTORS|
DROP TABLE TOURISTS|
CREATE TABLE TOURISTS(
   ID NUMBER PRIMARY KEY CHECK(ID > 0) NOT NULL,
   NAME VARCHAR2(25) NOT NULL,
   LAST_NAME VARCHAR2(25) NOT NULL,
   SEX VARCHAR2(1) CHECK(SEX = 'M' OR SEX = 'W') NOT NULL,
   BIRTH DATE NOT NULL,
   CATEGORY NUMBER DEFAULT 0 CHECK(CATEGORY >= 0 AND CATEGORY <= 10),
   TYPE VARCHAR2(25) DEFAULT 'AMATEUR' CHECK(TYPE = 'AMATEUR' OR TYPE = 'SPORTSMAN' OR TYPE = 'COACH'))|
CREATE TABLE DIRECTORS(
   ID NUMBER PRIMARY KEY CHECK(ID > 0) NOT NULL,
   NAME VARCHAR2(25) NOT NULL,
   LAST_NAME VARCHAR2(25) NOT NULL,
   BIRTH DATE NOT NULL,
   ADMISSION DATE,
   SALARY NUMBER CHECK(SALARY >= 1000),
   SECTION NUMBER,
   CHECK(EXTRACT(YEAR FROM ADMISSION) >= EXTRACT(YEAR FROM BIRTH) + 18)
)|
CREATE TABLE SECTIONS(
   ID NUMBER PRIMARY KEY CHECK(ID > 0) NOT NULL,
   NAME VARCHAR2(25) NOT NULL,
   DIRECTOR NUMBER CHECK(DIRECTOR > 0)
)|
CREATE TABLE GROUPS(
   SECTION NUMBER NOT NULL CHECK(SECTION > 0) REFERENCES SECTIONS (ID) ON DELETE CASCADE,
   ID NUMBER PRIMARY KEY CHECK(ID > 0) NOT NULL
)|
CREATE TABLE TRAININGS(
   SECTION NUMBER NOT NULL CHECK(SECTION > 0) REFERENCES SECTIONS (ID) ON DELETE CASCADE,
   ID NUMBER PRIMARY KEY CHECK(ID > 0) NOT NULL,
   NAME VARCHAR2(25) NOT NULL,
   DAY NUMBER NOT NULL CHECK(DAY > 0 AND DAY <= 7),
   BEGINNING_HOUR NUMBER CHECK(BEGINNING_HOUR >= 0 AND BEGINNING_HOUR < 24) NOT NULL,
   ENDING_HOUR NUMBER CHECK(ENDING_HOUR >= 0 AND ENDING_HOUR < 24) NOT NULL,
   PLACE VARCHAR2(25),
   CHECK(BEGINNING_HOUR < ENDING_HOUR))|
CREATE TABLE SPORTSMEN(
   ID NUMBER NOT NULL CHECK(ID > 0) REFERENCES TOURISTS (ID) ON DELETE CASCADE,
   GROUP_ID NUMBER CHECK(GROUP_ID > 0) REFERENCES GROUPS (ID) ON DELETE SET NULL)|
CREATE TABLE COACHES(
   ID NUMBER NOT NULL CHECK(ID > 0) REFERENCES TOURISTS (ID) ON DELETE CASCADE,
   SPECIALIZATION VARCHAR2(25) NOT NULL,
   SECTION NUMBER CHECK(SECTION > 0) REFERENCES SECTIONS (ID) ON DELETE SET NULL,
   SALARY NUMBER CHECK(SALARY >= 1000))|
CREATE TABLE TRAINS(
   COACH NUMBER NOT NULL CHECK(COACH > 0) REFERENCES TOURISTS (ID) ON DELETE CASCADE,
   GROUP_ID NUMBER NOT NULL CHECK(GROUP_ID > 0) REFERENCES GROUPS (ID) ON DELETE CASCADE,
   TRAINING NUMBER NOT NULL CHECK(TRAINING > 0) REFERENCES TRAININGS (ID) ON DELETE CASCADE)|
CREATE TABLE ATTENDANCE(
   SPORTSMAN NUMBER NOT NULL CHECK(SPORTSMAN > 0) REFERENCES TOURISTS (ID) ON DELETE CASCADE,
   TRAINING NUMBER NOT NULL CHECK(TRAINING > 0) REFERENCES TRAININGS (ID) ON DELETE CASCADE,
   TIME DATE NOT NULL,
   VISITED NUMBER NOT NULL CHECK(VISITED = 1 OR VISITED = 0))|
CREATE TABLE COMPETITIONS(
   ID NUMBER NOT NULL PRIMARY KEY CHECK(ID > 0),
   NAME VARCHAR2(50) NOT NULL,
   TIME DATE)|
CREATE TABLE PARTICIPATION(
   COMPETITION NUMBER NOT NULL CHECK(COMPETITION > 0) REFERENCES COMPETITIONS (ID) ON DELETE CASCADE,
   PARTICIPANT NUMBER NOT NULL CHECK(PARTICIPANT > 0) REFERENCES TOURISTS (ID) ON DELETE CASCADE)|
CREATE TABLE ROUTE(
   ID NUMBER NOT NULL CHECK(ID > 0) PRIMARY KEY,
   NAME VARCHAR2(50) NOT NULL,
   LENGTH_METRE NUMBER NOT NULL CHECK(LENGTH_METRE > 0))|
CREATE TABLE HIKE(
   ID NUMBER NOT NULL CHECK(ID > 0) PRIMARY KEY,
   NAME VARCHAR2(25) NOT NULL,
   ROUTE NUMBER NOT NULL CHECK(ROUTE > 0) REFERENCES ROUTE (ID) ON DELETE CASCADE,
   REQUIREMENT VARCHAR2(25),
   DAYS NUMBER NOT NULL CHECK(DAYS > 0),
   CATEGORY NUMBER NOT NULL CHECK(CATEGORY >= 0 AND CATEGORY <= 10),
   HAS_PLAN NUMBER DEFAULT 0 CHECK(HAS_PLAN = 1 OR HAS_PLAN = 0))|
CREATE TABLE PLACE(
   ID NUMBER NOT NULL CHECK(ID > 0) PRIMARY KEY,
   NAME VARCHAR2(25) NOT NULL)|
CREATE TABLE CONTAINS(
   ROUTE NUMBER NOT NULL CHECK(ROUTE > 0) REFERENCES ROUTE (ID) ON DELETE CASCADE,
   PLACE NUMBER NOT NULL CHECK(PLACE > 0) REFERENCES PLACE (ID) ON DELETE CASCADE)|
CREATE TABLE CHECK_POINT(
   HIKE NUMBER NOT NULL CHECK(HIKE > 0) REFERENCES HIKE (ID) ON DELETE CASCADE,
   DAY NUMBER NOT NULL CHECK(DAY > 0),
   PLACE NUMBER NOT NULL CHECK(PLACE > 0) REFERENCES PLACE (ID) ON DELETE CASCADE)|
CREATE TABLE CONDUCTED_HIKE(
   ID NUMBER NOT NULL CHECK(ID > 0) PRIMARY KEY,
   HIKE NUMBER NOT NULL CHECK(HIKE > 0) REFERENCES HIKE (ID) ON DELETE CASCADE,
   INSTRUCTOR NUMBER NOT NULL CHECK(INSTRUCTOR > 0) REFERENCES TOURISTS (ID) ON DELETE CASCADE,
   TIME DATE NOT NULL)|
CREATE TABLE DIARY(
   ID NUMBER NOT NULL CHECK(ID > 0) PRIMARY KEY,
   HIKE NUMBER NOT NULL CHECK(HIKE > 0) REFERENCES CONDUCTED_HIKE (ID) ON DELETE CASCADE,
   TEXT VARCHAR2(300) NOT NULL)|
CREATE TABLE WENT_TO_HIKE(
   HIKE NUMBER NOT NULL CHECK(HIKE > 0) REFERENCES CONDUCTED_HIKE (ID) ON DELETE CASCADE,
   TOURIST NUMBER NOT NULL CHECK(TOURIST > 0) REFERENCES TOURISTS (ID) ON DELETE CASCADE)|
CREATE SEQUENCE INCREMENT_TOURIST
   INCREMENT BY 1|
CREATE SEQUENCE INCREMENT_COMPETITION
   INCREMENT BY 1|
CREATE SEQUENCE INCREMENT_CONDUCTED_HIKE
   INCREMENT BY 1|
CREATE SEQUENCE INCREMENT_DIARY
   INCREMENT BY 1|
CREATE SEQUENCE INCREMENT_DIRECTOR
   INCREMENT BY 1|
CREATE SEQUENCE INCREMENT_HIKE
   INCREMENT BY 1|
CREATE SEQUENCE INCREMENT_PLACE
   INCREMENT BY 1|
CREATE SEQUENCE INCREMENT_ROUTE
   INCREMENT BY 1|
CREATE SEQUENCE INCREMENT_SECTION
   INCREMENT BY 1|
CREATE SEQUENCE INCREMENT_TRAINING
   INCREMENT BY 1|
CREATE OR REPLACE TRIGGER INCREASE_ID_COMPETITION
   BEFORE
   INSERT ON COMPETITIONS
   FOR EACH ROW
   BEGIN
      SELECT INCREMENT_COMPETITION.NextVal INTO :NEW.ID FROM DUAL;
   END;|
CREATE OR REPLACE TRIGGER INCREASE_ID_CONDUCTED_HIKE
   BEFORE
   INSERT ON CONDUCTED_HIKE
   FOR EACH ROW
   BEGIN
      SELECT INCREMENT_CONDUCTED_HIKE.NextVal INTO :NEW.ID FROM DUAL;
   END;|
CREATE OR REPLACE TRIGGER INCREASE_ID_DIARY
   BEFORE
   INSERT ON DIARY
   FOR EACH ROW
   BEGIN
      SELECT INCREMENT_DIARY.NextVal INTO :NEW.ID FROM DUAL;
   END;|
CREATE OR REPLACE TRIGGER INCREASE_ID_DIRECTOR
   BEFORE
   INSERT ON DIRECTORS
   FOR EACH ROW
   BEGIN
      SELECT INCREMENT_DIRECTOR.NextVal INTO :NEW.ID FROM DUAL;
   END;|
CREATE OR REPLACE TRIGGER INCREASE_ID_HIKE
   BEFORE
   INSERT ON HIKE
   FOR EACH ROW
   BEGIN
      SELECT INCREMENT_HIKE.NextVal INTO :NEW.ID FROM DUAL;
   END;|
CREATE OR REPLACE TRIGGER INCREASE_ID_PLACE
   BEFORE
   INSERT ON PLACE
   FOR EACH ROW
   BEGIN
      SELECT INCREMENT_PLACE.NextVal INTO :NEW.ID FROM DUAL;
   END;|
CREATE OR REPLACE TRIGGER INCREASE_ID_ROUTE
   BEFORE
   INSERT ON ROUTE
   FOR EACH ROW
   BEGIN
      SELECT INCREMENT_ROUTE.NextVal INTO :NEW.ID FROM DUAL;
   END;|
CREATE OR REPLACE TRIGGER INCREASE_ID_SECTION
   BEFORE
   INSERT ON SECTIONS
   FOR EACH ROW
   BEGIN
      SELECT INCREMENT_SECTION.NextVal INTO :NEW.ID FROM DUAL;
   END;|
CREATE OR REPLACE TRIGGER INCREASE_ID_TOURIST
   BEFORE
   INSERT ON TOURISTS
   FOR EACH ROW
   BEGIN
      SELECT INCREMENT_TOURIST.NextVal INTO :NEW.ID FROM DUAL;
   END;|
CREATE OR REPLACE TRIGGER INCREASE_ID_TRAINING
   BEFORE
   INSERT ON TRAININGS
   FOR EACH ROW
   BEGIN
      SELECT INCREMENT_TRAINING.NextVal INTO :NEW.ID FROM DUAL;
   END;|
CREATE OR REPLACE TRIGGER INSERT_SPORTSMAN
   BEFORE
   INSERT ON SPORTSMEN
   FOR EACH ROW
   DECLARE
      TOURIST_TYPE VARCHAR2(25);
      COACH_EXCEPTION EXCEPTION;
      SPORTSMAN_EXCEPTION EXCEPTION;
      COACH_ERROR NUMBER := -20000;
      SPORTSMAN_ERROR NUMBER := -20001;
   BEGIN
      SELECT TYPE INTO TOURIST_TYPE
         FROM TOURISTS WHERE :NEW.ID = TOURISTS.ID;
      IF TOURIST_TYPE = 'AMATEUR' THEN
         UPDATE TOURISTS SET TYPE = 'SPORTSMAN' WHERE ID = :NEW.ID;
      ELSIF TOURIST_TYPE = 'SPORTSMAN' THEN
         RAISE SPORTSMAN_EXCEPTION;
      ELSIF TOURIST_TYPE = 'COACH' THEN
         RAISE COACH_EXCEPTION;
      END IF;
   EXCEPTION
      WHEN COACH_EXCEPTION THEN
         RAISE_APPLICATION_ERROR(COACH_ERROR,'Coach can not be sportsman');
      WHEN SPORTSMAN_EXCEPTION THEN
         RAISE_APPLICATION_ERROR(SPORTSMAN_ERROR,'Sportsman already exist');
   END;|
CREATE OR REPLACE TRIGGER INSERT_COACH
   BEFORE
   INSERT ON COACHES
   FOR EACH ROW
   DECLARE
      TOURIST_TYPE VARCHAR2(25);
      COACH_EXCEPTION EXCEPTION;
      SPORTSMAN_EXCEPTION EXCEPTION;
      COACH_ERROR NUMBER := -20000;
      SPORTSMAN_ERROR NUMBER := -20001;
   BEGIN
      SELECT TYPE INTO TOURIST_TYPE
         FROM TOURISTS WHERE :NEW.ID = TOURISTS.ID;
      IF TOURIST_TYPE = 'AMATEUR' THEN
         UPDATE TOURISTS SET TYPE = 'COACH' WHERE ID = :NEW.ID;
      ELSIF TOURIST_TYPE = 'SPORTSMAN' THEN
         RAISE SPORTSMAN_EXCEPTION;
      ELSIF TOURIST_TYPE = 'COACH' THEN
         RAISE COACH_EXCEPTION;
      END IF;
   EXCEPTION
      WHEN COACH_EXCEPTION THEN
         RAISE_APPLICATION_ERROR(COACH_ERROR,'Coach already exist');
      WHEN SPORTSMAN_EXCEPTION THEN
         RAISE_APPLICATION_ERROR(SPORTSMAN_ERROR,'Sportsman can not be coach');
   END;|
CREATE OR REPLACE TRIGGER INSERT_TRAINS
   BEFORE
   INSERT ON TRAINS
   FOR EACH ROW
   DECLARE
      TOURIST_TYPE VARCHAR2(25);
      AMATEUR_EXCEPTION EXCEPTION;
      SPORTSMAN_EXCEPTION EXCEPTION;
      AMATEUR_ERROR NUMBER := -20002;
      SPORTSMAN_ERROR NUMBER := -20001;
   BEGIN
      SELECT TYPE INTO TOURIST_TYPE
         FROM TOURISTS WHERE :NEW.COACH = TOURISTS.ID;
      IF TOURIST_TYPE = 'AMATEUR' THEN
         RAISE AMATEUR_EXCEPTION;
      ELSIF TOURIST_TYPE = 'SPORTSMAN' THEN
         RAISE SPORTSMAN_EXCEPTION;
      END IF;
   EXCEPTION
      WHEN AMATEUR_EXCEPTION THEN
         RAISE_APPLICATION_ERROR(AMATEUR_ERROR,'Amateur can not train group');
      WHEN SPORTSMAN_EXCEPTION THEN
         RAISE_APPLICATION_ERROR(SPORTSMAN_ERROR,'Sportsman can not train group');
   END;|
CREATE OR REPLACE TRIGGER INSERT_PARTICIPATION
   BEFORE
   INSERT ON PARTICIPATION
   FOR EACH ROW
   DECLARE
      TOURIST_TYPE VARCHAR2(25);
      AMATEUR_EXCEPTION EXCEPTION;
      AMATEUR_ERROR NUMBER := -20002;
   BEGIN
      SELECT TYPE INTO TOURIST_TYPE
         FROM TOURISTS WHERE :NEW.PARTICIPANT = TOURISTS.ID;
      IF TOURIST_TYPE = 'AMATEUR' THEN
         RAISE AMATEUR_EXCEPTION;
      END IF;
   EXCEPTION
      WHEN AMATEUR_EXCEPTION THEN
         RAISE_APPLICATION_ERROR(AMATEUR_ERROR,'Amateur can not be participant');
   END;|
CREATE OR REPLACE TRIGGER INSERT_ATTENDANCE
   BEFORE
   INSERT ON ATTENDANCE
   FOR EACH ROW
   DECLARE
      TOURIST_TYPE VARCHAR2(25);
      AMATEUR_EXCEPTION EXCEPTION;
      COACH_EXCEPTION EXCEPTION;
      AMATEUR_ERROR NUMBER := -20002;
      COACH_ERROR NUMBER := -20000;
   BEGIN
      SELECT TYPE INTO TOURIST_TYPE
         FROM TOURISTS WHERE :NEW.SPORTSMAN = TOURISTS.ID;
      IF TOURIST_TYPE = 'AMATEUR' THEN
         RAISE AMATEUR_EXCEPTION;
      ELSIF TOURIST_TYPE = 'COACH' THEN
         RAISE COACH_EXCEPTION;
      END IF;
   EXCEPTION
      WHEN AMATEUR_EXCEPTION THEN
         RAISE_APPLICATION_ERROR(AMATEUR_ERROR,'Amateur can not attend trainings');
      WHEN COACH_EXCEPTION THEN
         RAISE_APPLICATION_ERROR(COACH_ERROR,'Coach can not attend trainings');
   END;|
CREATE OR REPLACE TRIGGER INSERT_CONDUCTED_HIKE
   BEFORE
   INSERT ON CONDUCTED_HIKE
   FOR EACH ROW
   DECLARE
      TYPE TOURIST_DATA IS RECORD (TYPE VARCHAR2(25), CATEGORY NUMBER);
      TOURIST TOURIST_DATA;
      HIKE_CATEGORY NUMBER;
      AMATEUR_EXCEPTION EXCEPTION;
      CATEGORY_EXCEPTION EXCEPTION;
      AMATEUR_ERROR NUMBER := -20002;
      CATEGORY_ERROR NUMBER := -20003;
   BEGIN
      SELECT TYPE, CATEGORY INTO TOURIST.TYPE, TOURIST.CATEGORY
         FROM TOURISTS WHERE :NEW.INSTRUCTOR = TOURISTS.ID;
      SELECT HIKE.CATEGORY INTO HIKE_CATEGORY
         FROM HIKE
         WHERE HIKE.ID = :NEW.HIKE;
      IF TOURIST.TYPE = 'AMATEUR' THEN
         RAISE AMATEUR_EXCEPTION;
      ELSIF TOURIST.CATEGORY < HIKE_CATEGORY THEN
         RAISE CATEGORY_EXCEPTION;
      END IF;
   EXCEPTION
      WHEN AMATEUR_EXCEPTION THEN
         RAISE_APPLICATION_ERROR(AMATEUR_ERROR,'Amateur can not be instructor');
      WHEN CATEGORY_EXCEPTION THEN
         RAISE_APPLICATION_ERROR(CATEGORY_ERROR,'Instructor have to have category more or equal hike category');
   END;|
CREATE OR REPLACE TRIGGER INSERT_DIARY
   BEFORE
   INSERT ON DIARY
   FOR EACH ROW
   DECLARE
      HIKE_HAS_PLAN NUMBER;
      NO_PLAN_EXCEPTION EXCEPTION;
      NO_PLAN_ERROR NUMBER := -20004;
   BEGIN
      SELECT HAS_PLAN INTO HIKE_HAS_PLAN
         FROM CONDUCTED_HIKE JOIN HIKE
            ON CONDUCTED_HIKE.HIKE = HIKE.ID
         WHERE CONDUCTED_HIKE.ID = :NEW.HIKE;
      IF HIKE_HAS_PLAN = 0 THEN
         RAISE NO_PLAN_EXCEPTION;
      END IF;
   EXCEPTION
      WHEN NO_PLAN_EXCEPTION THEN
         RAISE_APPLICATION_ERROR(NO_PLAN_ERROR,'Hike does not have plan');
   END;|
CREATE OR REPLACE TRIGGER INSERT_CHECK_POINT
   BEFORE
   INSERT ON CHECK_POINT
   FOR EACH ROW
   DECLARE
      TYPE HIKE_DATA IS RECORD (DAYS NUMBER, HAS_PLAN NUMBER);
      CURRENT_HIKE HIKE_DATA;
      DAYS_EXCEPTION EXCEPTION;
      DAYS_ERROR NUMBER := -20005;
   BEGIN
      SELECT HIKE.DAYS, HIKE.HAS_PLAN INTO CURRENT_HIKE.DAYS, CURRENT_HIKE.HAS_PLAN
         FROM HIKE WHERE :NEW.HIKE = HIKE.ID;
      IF CURRENT_HIKE.DAYS < :NEW.DAY THEN
         RAISE DAYS_EXCEPTION;
      ELSIF CURRENT_HIKE.HAS_PLAN = 0 THEN
         UPDATE HIKE SET HIKE.HAS_PLAN = 1 WHERE HIKE.ID = :NEW.HIKE;
      END IF;
   EXCEPTION
      WHEN DAYS_EXCEPTION THEN
         RAISE_APPLICATION_ERROR(DAYS_ERROR,'Checkpoint is out of days in current hike');
   END;|
CREATE OR REPLACE TRIGGER INSERT_WENT_TO_HIKE
   BEFORE
   INSERT ON WENT_TO_HIKE
   FOR EACH ROW
   DECLARE
      TOURIST_CATEGORY NUMBER;
      HIKE_CATEGORY NUMBER;
   BEGIN
      SELECT CATEGORY INTO TOURIST_CATEGORY FROM TOURISTS WHERE ID = :NEW.TOURIST;
	  SELECT HIKE.CATEGORY INTO HIKE_CATEGORY FROM CONDUCTED_HIKE, HIKE WHERE CONDUCTED_HIKE.HIKE = HIKE.ID AND CONDUCTED_HIKE.ID = :NEW.HIKE;
      IF TOURIST_CATEGORY < HIKE_CATEGORY THEN
         UPDATE TOURISTS SET CATEGORY=HIKE_CATEGORY WHERE ID=:NEW.TOURIST;
      END IF;
   END;|